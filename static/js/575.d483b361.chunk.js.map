{"version":3,"file":"static/js/575.d483b361.chunk.js","mappings":"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","sources":["redux/selectors/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/contactForm.module.css?2173","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/contactList.module.css?ddc0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/form.module.css?7b94","components/Contacts/Contacts.jsx"],"sourcesContent":["export const selectFetchContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactForm_form__3ay0L\",\"input\":\"contactForm_input__wCtae\",\"label\":\"contactForm_label__WakW9\",\"btn\":\"contactForm_btn__qtr3a\"};","import styles from './contactForm.module.css';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NotificationManager } from 'react-notifications';\nimport { selectFetchContacts } from 'redux/selectors/selectors';\nimport { addContact } from 'redux/operations/contactsOperations';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectFetchContacts);\n  const addingContact = evt => {\n    evt.preventDefault();\n    contacts.some(contact => name === contact.name)\n      ? NotificationManager.info(\n          'Try again 😉',\n          `${evt.name} is already in contacts!`,\n          3500\n        )\n      : dispatch(addContact({ name, phone: number }));\n    setName('');\n    setNumber('');\n  };\n\n  const changeInput = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form onSubmit={addingContact} className={styles.form}>\n      <label className={styles.label}>\n        Name:\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={changeInput}\n        />\n      </label>\n      <label className={styles.label}>\n        Number:\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={changeInput}\n        />\n      </label>\n      <button className={styles.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"contactList_list__R0BG5\",\"btn\":\"contactList_btn__D1sqk\"};","import styles from './contactList.module.css';\nimport { deleteContact } from 'redux/operations/contactsOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter, selectFetchContacts } from 'redux/selectors/selectors';\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const filtered = useSelector(selectFilter);\n  const contacts = useSelector(selectFetchContacts);\n  const filteredContacts = () => {\n    if (filtered) {\n      const toLower = filtered.trim().toLowerCase();\n      return contacts.filter(i => i.name.toLowerCase().includes(toLower));\n    } else return contacts;\n  };\n\n  return (\n    <ul>\n      {filteredContacts().map(({ id, name, phone, avatar }) => (\n        <li key={id}>\n          <div className={styles.list} id={id}>\n            {avatar && (\n              <img\n                src={avatar}\n                alt={name}\n                width=\"50px\"\n                style={{ borderRadius: '30%' }}\n              />\n            )}\n            <p\n              style={{\n                fontWeight: 600,\n                fontFamily: 'sans-serif',\n              }}\n            >\n              {name}:\n            </p>\n            <p style={{ fontStyle: 'italic' }}>{phone}</p>\n            <button\n              className={styles.btn}\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              Delete\n            </button>\n          </div>\n          <hr style={{ padding: 0 }} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import { filterContact } from 'redux/slice/sliceFilter';\nimport { useDispatch } from 'react-redux';\nimport styles from './Filter.module.css';\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const onChangeInput = event => {\n    dispatch(filterContact(event.currentTarget.value));\n  };\n  return (\n    <>\n      <input\n        className={styles.input}\n        type=\"text\"\n        placeholder=\"Find contacts by name...\"\n        onChange={onChangeInput}\n      />\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"form_form__6MLiU\",\"header\":\"form_header__4xH6m\",\"formBack\":\"form_formBack__+a2GI\"};","import { ScaleLoader } from 'react-spinners';\nimport { NotificationContainer } from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\n\nimport {\n  selectIsLoading,\n  selectFetchContacts,\n  selectError,\n} from 'redux/selectors/selectors';\nimport { useSelector } from 'react-redux';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport styles from 'components/form.module.css';\n\nconst override = {\n  position: 'fixed',\n  top: '45%',\n  left: '50%',\n  transform: 'translateX(-50%) translateY(-50%)',\n};\n\nexport default function Contacts() {\n  const contacts = useSelector(selectFetchContacts);\n  const spinner = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <div className={styles.formBack}>\n      <div className={styles.form}>\n        <h1 className={styles.header}>My contacts</h1>\n        <ContactForm />\n        {spinner && (\n          <ScaleLoader\n            color=\"hsla(175, 100%, 37%, 1)\"\n            height={27}\n            margin={4}\n            width={4}\n            cssOverride={override}\n          />\n        )}\n        {error && (\n          <b style={{ color: '#ab0009', textAlign: 'center' }}>{error}</b>\n        )}\n\n        <h3>Contacts :</h3>\n        <>\n          {contacts.length === 0 ? (\n            <p>The contact list is empty</p>\n          ) : (\n            <Filter />\n          )}\n        </>\n        <ContactList />\n      </div>\n      <NotificationContainer />\n    </div>\n  );\n}\n"],"names":["selectFetchContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","ContactForm","dispatch","useDispatch","useState","name","setName","number","setNumber","useSelector","changeInput","e","target","value","onSubmit","evt","preventDefault","some","contact","NotificationManager","addContact","phone","className","styles","type","pattern","title","required","onChange","ContactList","filtered","toLower","trim","toLowerCase","i","includes","filteredContacts","map","id","avatar","src","alt","width","style","borderRadius","fontWeight","fontFamily","fontStyle","onClick","deleteContact","padding","Filter","placeholder","event","filterContact","currentTarget","override","position","top","left","transform","Contacts","spinner","ScaleLoader","color","height","margin","cssOverride","textAlign","length"],"sourceRoot":""}